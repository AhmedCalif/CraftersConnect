<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Show Project</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.3.8/purify.min.js"></script>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/@emailjs/browser@4/dist/email.min.js"></script>
  <script src="/config.js"></script>
  <link rel="stylesheet" href="/showProjects.css" />
</head>
<body>
  <!-- Add the hidden inputs at the top for easy access -->
  <input type="hidden" id="loggedInUsername" value="<%= loggedInUsername %>">
  <input type="hidden" id="loggedInUserId" value="<%= loggedInUserId %>">
  <input type="hidden" id="projectId" value="<%= project.projectId %>">

  <div id="project-<%= project.projectId %>" class="container mt-4">
    <div class="card p-3 shadow-sm">
      <div class="d-flex justify-content-between align-items-center">
        <a href="/my-projects/all" class="btn btn-outline-secondary back-btn">
          <i class="fas fa-arrow-left"></i>
        </a>
        <div class="icon-buttons">
          <% if (isCreator || isCollaborator) { %>
            <a href="/projects/<%= project.projectId %>/update" class="btn btn-outline-primary mx-1">
              <i class="fas fa-edit"></i>
            </a>
          <% } %>
          <% if (isCreator) { %>
            <button onclick="deleteProject('<%= project.projectId %>')" class="btn btn-outline-danger mx-1">
              <i class="fas fa-trash"></i>
            </button>
          <% } %>
          <% if (isCollaborator) { %>
            <button onclick="confirmLeaveProject('<%= project.projectId %>')" class="btn btn-outline-danger mx-1">
              <i class="fas fa-door-open"></i>
            </button>
          <% } %>
          <% if (!isCreator && !isCollaborator) { %>
            <form action="/projects/<%= project.projectId %>/join" method="POST" class="d-inline">
              <button type="submit" class="btn btn-outline-primary mx-1">
                <i class="fas fa-door-closed"></i>
              </button>
            </form>
          <% } %>
        </div>
      </div>

      <!-- Project Information -->
      <div class="project-info">
       <img
        id="projectImage"
        src="<%= project.Image.link %>"
        alt="<%= project.title %> cover image"
        class="project-img"
        /> 
        <h4 class="section-title" style="text-align: center"><%= project.title %></h4>
        <h5 class="section-subtitle" style="text-align: center">by: <%= project.Creator.username %></h5>

        <!-- Collaborators Section -->
        <h5 class="section-subtitle mt-4">Collaborators</h5>
        <% if (collaborators.length < 1) { %>
          <p>No collaborators found.</p>
        <% } else { %>
          <% collaborators.forEach(collaborator => { %>
            <div class="d-flex justify-content-between align-items-center mb-2">
              <span><%= collaborator.username %></span>
              <% if (isCreator && collaborator.userId !== project.userId) { %>
                <button type="button" onclick="removeCollaborator('<%= project.projectId %>', '<%= collaborator.userId %>')" class="btn btn-outline-danger btn-sm">
                  Remove Collaborator
                </button>
              <% } %>
            </div>
          <% }) %>
        <% } %>

        <!-- Progress Section - Available to creators and collaborators -->
        <% if (isCreator || isCollaborator) { %>
          <h5 class="section-subtitle mt-4">Progress</h5>
          <% let completedSteps = project.Steps.filter(step => step.completed).length;
             let totalSteps = project.Steps.length;
             let progressPercentage = totalSteps > 0 ? (completedSteps / totalSteps) * 100 : 0;
          %>
          <div class="card-progress mb-3">
            <div id="progress-bar" class="card-progress-bar" style="width: <%= progressPercentage %>%;"></div>
          </div>
          <p class="card-text">
            <span id="completed-steps"><%= completedSteps %></span> of 
            <span id="total-steps"><%= totalSteps %></span> steps completed - 
            <%= Math.ceil(progressPercentage) %>%
          </p>
          <ol class="pl-3">
            <% if (project.Steps && project.Steps.length > 0) { %>
              <% project.Steps.forEach((step, index) => { %>
                <li class="mb-2">
                  <strong>Step <%= index + 1 %>:</strong>
                  <p class="step-description"><%= step.description %></p>
                  <input type="checkbox" 
                         <%= step.completed ? 'checked' : '' %> 
                         onclick="toggleStepCompletion('<%= step.stepId %>', this.checked)"> 
                  Completed
                </li>
              <% }) %>
            <% } else { %>
              <li>No steps available</li>
            <% } %>
          </ol>

          <!-- Chat Section -->
          <div class="chat-section mt-4">
            <h4 class="section-title">Chat</h4>
            <div class="chat-box card">
              <div class="card-body">
                <div id="chat-content" class="chat-messages" style="height: 400px; overflow-y: auto;">
                  <!-- Chat messages will be displayed here -->
                </div>
              </div>
              <div class="card-footer">
                <form id="chat-form">
                  <div class="input-group">
                    <input type="text" id="chat-message" class="form-control" placeholder="Type a message..." />
                    <div class="input-group-append">
                      <button type="submit" class="btn btn-primary">Send</button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </div>

          <!-- Mood Board Section -->
          <div class="project-info mt-4">
            <h4 class="section-title">Mood Board</h4>
            <div class='card'>
              <form id="image-link-form" class="card-body">
                <input type="text" id="imageLink" name="imageLink" placeholder="Enter image link" class="form-control mb-2" required>
                <div class="d-flex gap-2">
                  <button type="submit" class="btn btn-primary">Upload link</button>
                  <button type="button" id="cancelButton" class="btn btn-secondary">Cancel</button>
                </div>
              </form>
            </div>
            <div id="mood-board" class="mt-3">
              <% project.MoodImages.forEach((image) => { %>
                <div class="card mt-2" data-link="<%= image.link %>">
                  <div class="card-body">
                    <img src="<%= image.link %>" alt="Mood Board Image" class="img-fluid rounded" style="max-width: 200px;">
                    <% if (loggedInUsername === image.uploadedBy) { %>
                      <button class="btn btn-danger mt-2" onclick="deleteImageLink('<%= image.link %>', '<%= project.projectId %>')">Delete</button>
                    <% } %>
                  </div>
                </div>
              <% }) %>
            </div>
          </div>
        <% } %>

        <!-- Invite Section - Only for Creator -->
        <% if (isCreator) { %>
          <div class="project-info mt-4">
            <h4 class="section-title">Invite Collaborators</h4>
            <form id="projectInviteForm" class="form-inline">
              <input type="email" id="inviteEmail" class="form-control mb-2 mr-sm-2" placeholder="Enter email" required />
              <button type="submit" class="btn btn-primary mb-2">Send Invite</button>
            </form>
          </div>
        <% } %>
      </div>
    </div>
  </div>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
const chatForm = document.getElementById('chat-form');
const chatMessage = document.getElementById('chat-message');
const chatContent = document.getElementById('chat-content');
const projectId = document.getElementById('projectId').value;
const loggedInUsername = document.getElementById('loggedInUsername');
const loggedInUserId = document.getElementById('loggedInUserId');

  // emailjs.init(window.config.EMAILJS_USER_ID);
  
  
 async function toggleStepCompletion(stepId, isChecked) {
    try {
        // First update the step in the database
        const response = await fetch(`/projects/steps/${stepId}/toggle`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ completed: isChecked })
        });

        if (!response.ok) {
            throw new Error('Failed to update step completion');
        }

        // After successful update, update the UI
        const completedSteps = document.querySelectorAll('input[type="checkbox"]:checked').length;
        const totalSteps = document.querySelectorAll('input[type="checkbox"]').length;
        const progressPercentage = totalSteps > 0 ? (completedSteps / totalSteps) * 100 : 0;

        // Update the progress bar
        const progressBar = document.getElementById('progress-bar');
        if (progressBar) {
            progressBar.style.width = `${progressPercentage}%`;
        }

        // Update the completion text
        document.getElementById('completed-steps').textContent = completedSteps;
        document.getElementById('total-steps').textContent = totalSteps;

        // Update the percentage text
        const percentageText = Math.ceil(progressPercentage);
        const progressText = document.querySelector('.card-text');
        if (progressText) {
            progressText.innerHTML = `
                <span id="completed-steps">${completedSteps}</span> of 
                <span id="total-steps">${totalSteps}</span> steps completed - 
                ${percentageText}%
            `;
        }

    } catch (error) {
        console.error('Error updating step completion:', error);
        // Revert the checkbox state since the update failed
        const checkbox = document.querySelector(`input[data-step-id="${stepId}"]`);
        if (checkbox) {
            checkbox.checked = !isChecked;
        }
        
        Swal.fire({
            icon: 'error',
            title: 'Failed to update step',
            text: 'There was an error updating the step completion status'
        });
    }
} 

  document.getElementById("projectInviteForm").addEventListener("submit", async function (e) {
    e.preventDefault();
    const email = document.getElementById("inviteEmail").value;
    const invitedBy = "<%= loggedInUserId %>";

    const response = await fetch('/projects/invite', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email, invitedBy, projectId }),
    });

    const data = await response.json();

    if (data.message === 'Invite created successfully') {
      const templateParams = {
        to_email: email,
        invite_link: `http://localhost:8000/invite/${data.token}`,
      };

      emailjs.send(window.config.EMAILJS_SERVICE_ID, window.config.EMAILJS_TEMPLATE_ID, templateParams)
        .then((response) => {
          Swal.fire({
            icon: 'success',
            title: 'Invite sent successfully',
            text: 'The invite has been sent to the email address.',
          });
        }, (error) => {
          Swal.fire({
            icon: 'error',
            title: 'Failed to send invite',
            text: 'There was an error sending the invite.',
          });
          console.error('Email.js error:', error);
        });
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Failed to create invite',
        text: data.message || 'There was an error creating the invite.',
      });
    }
  });
    
    document.getElementById("image-link-form").addEventListener("submit", async function (e) {
      e.preventDefault();
      const imageLinkInput = document.getElementById("imageLink");
      const imageLink = imageLinkInput.value;
    
      if (imageLink) {
        try {
          const response = await fetch('/projects/image-link', {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({ imageLink, projectId })
          });
    
          const data = await response.json();
          console.log("Response data:", data);
    
          if (response.ok) {
            Swal.fire({
              icon: "success",
              title: "Image link uploaded successfully!",
              text: "The image link has been added to the project."
            });
    
            // Clear the form
            imageLinkInput.value = "";
    
            addImageCard(data);
          } else {
            Swal.fire({
              icon: "error",
              title: "Failed to upload image link",
              text: data.message || "An error occurred while uploading the image link."
            });
          }
        } catch (error) {
          console.error("Error uploading image link:", error);
          Swal.fire({
            icon: "error",
            title: "Error!",
            text: error.message || "An error occurred while uploading the image link."
          });
        }
      }
    });
    
    function addImageCard(image) {
      console.log("Adding image card:", image);
    
      if (!image || !image.link) {
        console.error("Invalid image object:", image);
        return;
      }
    
      const moodBoard = document.getElementById("mood-board");
      const imageCard = document.createElement("div");
      imageCard.className = "card mt-2";
      imageCard.dataset.link = image.link;
      imageCard.innerHTML = `
        <div class="card-body">
          <img src="${image.link}" alt="Mood Board Image" class="img-fluid rounded" style="max-width: 200px;">
          <% if (isCreator) { %>
          <button class="btn btn-danger mt-2" onclick="deleteImageLink('${image.link}', '${projectId}')">Delete</button>
          <% } %>
        </div>
      `;
      moodBoard.appendChild(imageCard);
    }
    
    async function deleteImageLink(imageLink, projectId) {
      try {
        const response = await fetch('/projects/image-link', {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ imageLink, projectId })
        });
    
        const data = await response.json();
        console.log("Delete response:", data);
    
        if (response.ok) {
          Swal.fire({
            icon: "success",
            title: "Image deleted successfully!",
            text: "The image link has been removed from the project."
          });
    
          const imageCard = document.querySelector(`[data-link="${imageLink}"]`);
          if (imageCard) {
            imageCard.remove();
          }
        } else {
          Swal.fire({
            icon: "error",
            title: "Failed to delete image",
            text: data.message || "An error occurred while deleting the image link."
          });
        }
      } catch (error) {
        console.error("Error deleting image link:", error);
        Swal.fire({
          icon: "error",
          title: "Error!",
          text: error.message || "An error occurred while deleting the image link."
        });
      }
    }
    
    document.getElementById("cancelButton").addEventListener("click", function () {
      document.getElementById("imageLink").value = "";
    });
    
   async function fetchChats(projectId) {
    try {
        chatContent.innerHTML = "";
        const response = await fetch(`/chats/${projectId}`);
        if (!response.ok) throw new Error('Failed to fetch chats');
        
        const chats = await response.json();
        chats.forEach(displayMessage);
        scrollToBottom();
    } catch (error) {
        console.error('Error fetching chats:', error);
        showError('Failed to load chat messages');
    }
}


    function displayMessage(chat) {
    const messageElement = document.createElement('div');
    messageElement.id = `chat-${chat.chatId}`;
    messageElement.className = 'd-flex justify-content-between align-items-center p-2 mb-2 bg-light rounded';

    // Create message content
    const messageContent = document.createElement('div');
    const senderElement = document.createElement('strong');
    senderElement.textContent = `${chat.username}: `;
    const messageText = document.createTextNode(DOMPurify.sanitize(chat.message));
    messageContent.appendChild(senderElement);
    messageContent.appendChild(messageText);

    // Create actions container
    const actionsContainer = document.createElement('div');
    actionsContainer.className = 'd-flex gap-2';

    // Add like button
    const likeButton = document.createElement('button');
    likeButton.className = 'btn btn-link p-0';
    const heartIcon = document.createElement('i');
    heartIcon.className = `fa-heart ${chat.isLiked ? 'fas' : 'far'}`;
    heartIcon.style.color = chat.isLiked ? 'red' : 'gray';
    likeButton.appendChild(heartIcon);
    likeButton.onclick = () => handleLike(chat.chatId, chat.isLiked);

    actionsContainer.appendChild(likeButton);

    const currentUserId = document.getElementById('loggedInUserId').value;
    if (chat.userId === parseInt(currentUserId)) {
        const deleteButton = document.createElement('button');
        deleteButton.className = 'btn btn-link p-0 ms-2';
        deleteButton.innerHTML = '<i class="fas fa-trash text-danger"></i>';
        deleteButton.onclick = () => handleDelete(chat.chatId);
        deleteButton.setAttribute('data-toggle', 'tooltip');
        deleteButton.setAttribute('title', 'Delete message');
        actionsContainer.appendChild(deleteButton);
    } 

    messageElement.appendChild(messageContent);
    messageElement.appendChild(actionsContainer);
    chatContent.appendChild(messageElement);
}

    
   chatForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const messageText = chatMessage.value.trim();
    if (!messageText) return;

    try {
        const sanitizedMessage = DOMPurify.sanitize(messageText);
        
        const response = await fetch('/chats', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                message: sanitizedMessage,
                projectId
            })
        });

        if (!response.ok) throw new Error('Failed to send message');

        const chat = await response.json();
        chatMessage.value = '';
        
        // Message will be displayed through socket event
        socket.emit('chat message', { ...chat, projectId });
    } catch (error) {
        console.error('Error sending message:', error);
        showError('Failed to send message');
    }
});

async function handleLike(chatId, isLiked) {
    try {
        const endpoint = isLiked ? 'unlike' : 'like';
        const response = await fetch(`/chats/${chatId}/${endpoint}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) throw new Error(`Failed to ${endpoint} message`);

        const chatElement = document.getElementById(`chat-${chatId}`);
        const heartIcon = chatElement.querySelector('.fa-heart');
        
        heartIcon.classList.toggle('far');
        heartIcon.classList.toggle('fas');
        heartIcon.style.color = isLiked ? 'gray' : 'red';
        
        const button = heartIcon.parentElement;
        button.onclick = () => handleLike(chatId, !isLiked);
    } catch (error) {
        console.error('Error handling like:', error);
        showError(`Failed to ${isLiked ? 'unlike' : 'like'} message`);
    }
}


async function handleDelete(chatId) {
    try {
        const result = await Swal.fire({
            title: 'Delete Message?',
            text: 'This action cannot be undone',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Delete'
        });

        if (!result.isConfirmed) return;

        const response = await fetch(`/chats/${chatId}/delete`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) throw new Error('Failed to delete message');

        const messageElement = document.getElementById(`chat-${chatId}`);
        if (messageElement) {
            messageElement.remove();
            Swal.fire({
                icon: 'success',
                title: 'Deleted!',
                text: 'Message has been deleted'
            });
        }
    } catch (error) {
        console.error('Error deleting message:', error);
        showError('Failed to delete message');
    }
}

// Socket event listeners
socket.on('chat message', (chat) => {
    if (chat.projectId === projectId) {
        displayMessage(chat);
        scrollToBottom();
    }
});

socket.on('chat deleted', (chatId) => {
    const messageElement = document.getElementById(`chat-${chatId}`);
    if (messageElement) {
        messageElement.remove();
    }
});

// Utility functions
function scrollToBottom() {
    chatContent.scrollTop = chatContent.scrollHeight;
}

function showError(message) {
    Swal.fire({
        icon: 'error',
        title: 'Error',
        text: message,
        timer: 3000,
        timerProgressBar: true
    });
}
    
    fetchChats(projectId);
    
    async function likeChat(chatId) {
      try {
        const response = await fetch(`/chats/${chatId}/like`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });
        const result = await response.json();
        if (response.ok) {
          const chatElement = document.getElementById(`chat-${chatId}`);
          const heartIcon = chatElement.querySelector(".fa-heart");
          heartIcon.classList.remove("far");
          heartIcon.classList.add("fas");
          heartIcon.style.color = "red";
          heartIcon.setAttribute("onclick", `unlikeChat(${chatId})`);
        }
      } catch (error) {
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: "Failed to like the chat message.",
        });
      }
    }
    
    async function unlikeChat(chatId) {
      try {
        const response = await fetch(`/chats/${chatId}/unlike`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });
        const result = await response.json();
        if (response.ok) {
          const chatElement = document.getElementById(`chat-${chatId}`);
          const heartIcon = chatElement.querySelector(".fa-heart");
          heartIcon.classList.remove("fas");
          heartIcon.classList.add("far");
          heartIcon.style.color = "white";
          heartIcon.setAttribute("onclick", `likeChat(${chatId})`);
        }
      } catch (error) {
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: "Failed to unlike the chat message.",
        });
      }
    }
    
    async function deleteChat(chatId) {
      try {
        const response = await fetch(`/chats/${chatId}/delete`, {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
          },
        });
        const result = await response.json();
        if (response.ok) {
          Swal.fire({
            icon: "success",
            title: "Deleted!",
            text: "Chat has been successfully deleted.",
          });
          const chatElement = document.getElementById(`chat-${chatId}`);
          if (chatElement) {
            chatElement.remove();
          }
        }
      } catch (error) {
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: "Failed to delete the chat, please try again later.",
        });
      }
    }
    
    
    async function deleteProject(projectId) {
      const result = await Swal.fire({
        title: "Are you sure?",
        text: "You won't be able to revert this!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#F5E2C2",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, delete it!",
      });
    
      if (result.isConfirmed) {
        try {
          console.log("Deleting project with ID:", projectId);
          const response = await fetch(`/projects/${projectId}/delete`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
          });
    
          if (!response.ok) {
            const data = await response.json();
            Swal.fire({
              icon: "error",
              title: "Oops...",
              text: data.message || "Failed to delete the project, please try again later.",
            });
            throw new Error(data.message || "Server responded with an error.");
          }
    
          const data = await response.json();
          console.log("Project deleted:", data);
    
          const projectElement = document.getElementById(`project-${projectId}`);
          if (projectElement) {
            projectElement.remove();
            Swal.fire({
              icon: "success",
              title: "Deleted!",
              text: data.message || "Project has been successfully deleted.",
            }).then(() => {
              window.location.href = "/my-projects/all";
            });
          } else {
            console.error("Failed to find the project element:", `project-${projectId}`);
            Swal.fire({
              icon: "error",
              title: "Oops...",
              text: "Failed to find the project element on the page.",
            });
          }
        } catch (error) {
          console.error("Error deleting the project:", error);
          Swal.fire({
            icon: "error",
            title: "Error!",
            text: "There was an issue deleting your project.",
          });
        }
      }
    }
    
    async function confirmLeaveProject(projectId) {
      const result = await Swal.fire({
        title: "Are you sure?",
        text: "You won't be able to revert this!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#F5E2C2",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, leave it!",
      });
    
      if (result.isConfirmed) {
        try {
          const response = await fetch(`/projects/${projectId}/leave`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
          });
    
          if (!response.ok) {
            const data = await response.json();
            Swal.fire({
              icon: "error",
              title: "Oops...",
              text: data.message || "Failed to leave the project, please try again later.",
            });
            throw new Error(data.message || "Server responded with an error.");
          }
    
          const data = await response.json();
          Swal.fire({
            icon: "success",
            title: "Left Project!",
            text: data.message || "You have successfully left the project.",
          }).then(() => {
            window.location.href = "/my-projects/all";
          });
        } catch (error) {
          console.error("Error leaving the project:", error);
          Swal.fire({
            icon: "error",
            title: "Error!",
            text: "There was an issue leaving the project.",
          });
        }
      }
    }
    
   
    async function removeCollaborator(projectId, collaboratorId) {
      try {
        console.log(`Attempting to remove collaborator with ID: ${collaboratorId} from project ID: ${projectId}`);
    
        const response = await fetch(`/projects/${projectId}/collaborator/${collaboratorId}/remove`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
    
        const data = await response.json();
        console.log('Response from server:', data);
    
        if (!response.ok) {
          Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: data.message || 'Failed to remove collaborator, please try again later.',
          });
          throw new Error(data.message || 'Failed to remove collaborator.');
        }
    
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: 'Collaborator removed successfully.',
        }).then(() => {
          location.reload();
        });
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error!',
          text: 'An error occurred while removing the collaborator.',
        });
      }
    }
    
    document.getElementById("cancelButton").addEventListener("click", function () {
      document.getElementById("imageLink").value = "";
    });
  </script>
</body>
</html>
