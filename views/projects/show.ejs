<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Show Project</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link rel="stylesheet" href="/showProjects.css"/>
</head>
<body>
  <div class="container mt-4">
    <div class="card p-3 shadow-sm">
      <div class="d-flex justify-content-between align-items-center">
        <a href="javascript:history.back()" class="btn btn-outline-secondary back-btn">
          <i class="fas fa-arrow-left"></i>
        </a>
        <div>
          <% if (project.Creator && project.Creator.username === loggedInUsername) { %>
            <a href="/projects/<%= project.projectId %>/update" class="btn btn-outline-primary">
              <i class="fas fa-edit"></i>
            </a>
            <div class="project" id="project-<%= project.projectId %>">
           
            </div>
            <button onclick="deleteProject('<%= project.projectId %>')" class="btn btn-outline-danger">
              <i class="fas fa-trash"></i>
            </button>
          <% } %>
        </div>
      </div>
      <div class="text-center mt-3">
        <h2 class="project-title"><%= project.title %></h2>
      </div>
      <div class="text-center mb-3">
        <% if (project.Images && project.Images.length > 0) { %>
          <img src="<%= project.Images[0].link %>" alt="Cover Image" class="img-fluid rounded project-image" />
        <% } %>
      </div>
      <div class="project-info">
        <h4 class="section-title">Project Info</h4>
        <h5 class="section-subtitle">Process</h5>
        <ol class="pl-3">
          <% if (project.Steps && project.Steps.length > 0) { %>
            <% project.Steps.forEach((step, index) => { %>
              <li class="mb-2">
                <strong>Step <%= index + 1 %>:</strong>
                <p class="step-description"><%= step.description %></p>
              </li>
            <% }); %>
          <% } else { %>
            <li>No steps available</li>
          <% } %>
        </ol>
        <% if (project.Collaborators && project.Collaborators.map(c => c.username).includes(loggedInUsername)) { %>
          <div class="action-buttons mt-3 text-center">
            <a href="/projects/<%= project.projectId %>/update" class="btn btn-outline-primary">
              <i class="fas fa-edit"></i> Edit Project
            </a>
          </div>
        <% } %>
      </div>
      <!-- Chat Section -->
      <% if (project.Creator.username === loggedInUsername || project.Collaborators.map(c => c.username).includes(loggedInUsername)) { %>
      <div class="chat-section mt-4">
        <h4 class="section-title">Chat</h4>
        <div class="chat-box card">
          <div class="card-body chat-content" id="chat-content">
            <!-- Chat messages will appear here -->
          </div>
          <div class="card-footer">
            <form id="chat-form">
              <div class="input-group">
                <input type="text" id="chat-message" class="form-control" placeholder="Type a message..." />
                <div class="input-group-append">
                  <button type="submit" class="btn btn-primary">Send</button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
      <% } %>
      <!-- End of Chat Section -->
    </div>
  </div>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const chatForm = document.getElementById('chat-form');
    const chatMessage = document.getElementById('chat-message');
    const chatContent = document.getElementById('chat-content');
    const loggedInUsername = '<%= loggedInUsername %>';
    const projectId = '<%= project.projectId %>';
  
    // Fetch chat messages
    async function fetchChats(projectId) {
      try {
        chatContent.innerHTML = ''; // Clear current chat content
        const response = await fetch(`/chats/${projectId}`);
        const chats = await response.json();
        chats.forEach(chat => {
          displayMessage(chat);
        });
      } catch (error) {
        console.error('Error fetching chats:', error);
      }
    }
  
    function displayMessage(chat) {
      const isLiked = chat.likedBy && chat.likedBy.includes(loggedInUsername);
      const heartClass = isLiked ? 'fas' : 'far';
  
      const messageElement = document.createElement('div');
      messageElement.id = `chat-${chat.chatId}`;
      messageElement.innerHTML = `
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <strong>${chat.Sender.username}:</strong> ${chat.message}
          </div>
          <div>
            <i class="${heartClass} fa-heart text-danger" onclick="likeChat(${chat.chatId})"></i>
            <i class="fas fa-trash text-danger" onclick="deleteChat(${chat.chatId})"></i>
          </div>
        </div>
      `;
      chatContent.appendChild(messageElement);
      chatContent.scrollTop = chatContent.scrollHeight;
    }
  
    // Handle incoming messages
    socket.on('chat message', function(msg) {
      if (msg.projectId === projectId) {
        displayMessage(msg);
      }
    });
  
    // Handle form submission
    chatForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      if (chatMessage.value) {
        const message = chatMessage.value;
        chatMessage.value = '';
        try {
          const response = await fetch('/chats', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message, projectId })
          });
          const chat = await response.json();
          socket.emit('chat message', { ...chat, projectId });
        } catch (error) {
          console.error('Error sending message:', error);
        }
      }
    });
  
    fetchChats(projectId);
  
    async function likeChat(chatId) {
      try {
        const response = await fetch(`/chats/${chatId}/like`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        const result = await response.json();
        if (response.ok) {
          const chatElement = document.getElementById(`chat-${chatId}`);
          const heartIcon = chatElement.querySelector('.fa-heart');
          if (result.liked) {
            heartIcon.classList.remove('far');
            heartIcon.classList.add('fas');
          } else {
            heartIcon.classList.remove('fas');
            heartIcon.classList.add('far');
          }
          Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: result.liked ? 'You liked this chat.' : 'You unliked this chat.'
          });
        }
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Failed to like the chat, please try again later.'
        });
      }
    }
  
    async function deleteChat(chatId) {
      try {
        const response = await fetch(`/chats/${chatId}/delete`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        const result = await response.json();
        if (response.ok) {
          Swal.fire({
            icon: 'success',
            title: 'Deleted!',
            text: 'Chat has been successfully deleted.'
          });
          const chatElement = document.getElementById(`chat-${chatId}`);
          if (chatElement) {
            chatElement.remove();
          }
        }
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Failed to delete the chat, please try again later.'
        });
      }
    }
  </script>
  <script>
   async function deleteProject(projectId) {
  const result = await Swal.fire({
    title: 'Are you sure?',
    text: "You won't be able to revert this!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#F5E2C2',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, delete it!'
  });
  
  if (result.isConfirmed) {
    try {
      console.log('Deleting project with ID:', projectId);
      const response = await fetch(`/projects/${projectId}/delete`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });

      if (!response.ok) {
        const data = await response.json();
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: data.message || 'Failed to delete the project, please try again later.'
        });
        throw new Error(data.message || 'Server responded with an error.');
      }

      const data = await response.json();
      console.log('Project deleted:', data);

      const projectElement = document.getElementById(`project-${projectId}`);
      if (projectElement) {
        projectElement.remove();
        Swal.fire({
          icon: 'success',
          title: 'Deleted!',
          text: data.message || 'Project has been successfully deleted.'
        }).then(() => {
          window.location.href = '/my-projects/all'; 
        });
      } else {
        console.error('Failed to find the project element:', `project-${projectId}`);
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Failed to find the project element on the page.'
        });
      }
    } catch (error) {
      console.error('Error deleting the project:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error!',
        text: 'There was an issue deleting your project.'
      });
    }
  }
}

  </script>
</body>
</html>
