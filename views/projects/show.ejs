<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Show Project</title>
    <link
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="/showProjects.css" />
  </head>
  <body>
    <div id="project-<%= project.projectId %>" class="container mt-4">
      <div class="card p-3 shadow-sm">
        <div class="d-flex justify-content-between align-items-center">
          <a href="/my-projects/all" class="btn btn-outline-secondary back-btn">
            <i class="fas fa-arrow-left"></i>
          </a>
          <div class="icon-buttons">
            <% const isCreator = project.Creator && project.Creator.username ===
            loggedInUsername; %> <% const isCollaborator = project.Collaborators
            && project.Collaborators.map(c =>
            c.username).includes(loggedInUsername); %> <% if (isCreator ||
            isCollaborator) { %>
            <a
              href="/projects/<%= project.projectId %>/update"
              class="btn btn-outline-primary mx-1"
            >
              <i class="fas fa-edit"></i>
            </a>
            <% } %> <% if (isCreator) { %>
            <button
              onclick="deleteProject('<%= project.projectId %>')"
              class="btn btn-outline-danger mx-1"
            >
              <i class="fas fa-trash"></i>
            </button>
            <% } %> <% if (isCollaborator) { %>
            <button
              onclick="confirmLeaveProject('<%= project.projectId %>')"
              class="btn btn-outline-danger mx-1"
            >
              <i class="fas fa-door-open"></i>
            </button>
            <% } %> <% if (!isCreator && !isCollaborator) { %>
            <form
              action="/projects/<%= project.projectId %>/join"
              method="POST"
              class="d-inline"
            >
              <button type="submit" class="btn btn-outline-primary mx-1">
                <i class="fas fa-door-closed"></i>
              </button>
            </form>
            <% } %>
          </div>
        </div>
        <img
          id="projectImage"
          src="<%= project.Image && project.Image.link ? project.Image.link : 'https://i.pravatar.cc/150?img=3' %>"
          alt="<%= project.title %> cover image"
          class="project-img"
        />
        <input type="file" id="imageUpload" class="d-none" accept="image/*" />
        <div class="text-center mt-3">
          <h2 class="project-title"><%= project.title %></h2>
        </div>
        <div class="text-center mb-3">
          <% if (project.Images && project.Images.length > 0) { %>
          <img
            src="<%= project.Images[0].link %>"
            alt="Cover Image"
            class="img-fluid rounded project-image"
          />
          <% } %>
        </div>
        <div class="project-info">
          <h4 class="section-title">Project Info</h4>
          <br>
          <h5 class="section-subtitle">Collaborators</h5>
                  <!-- Remove Collaborators -->
                  <% collaborators.forEach(collaborator => { %>
                    <div>
                      <span><%= collaborator.username %></span>
                      <% if (isCreator) { %>
              <form action="/projects/<%= project.projectId %>/collaborator/<%= collaborator.userId %>/remove" method="POST" style="display:inline;">
                <button type="submit">Remove Collaborator</button>
                <% } %>
              </form>
            </div>
          <% }) %>

          <br>
          <h5 class="section-subtitle">Progress</h5>
          <% let completedSteps = 0; if (project.Steps && project.Steps.length >
          0) { completedSteps = project.Steps.filter(step =>
          step.completed).length; } const progressPercentage = project.Steps &&
          project.Steps.length > 0 ? (completedSteps / project.Steps.length) *
          100 : 0; %>
          <div class="card-progress mb-3">
            <div
              id="progress-bar"
              class="card-progress-bar"
              style="width: <%= progressPercentage %>%"
            ></div>
          </div>
          <p class="card-text">
            <span id="completed-steps"><%= completedSteps %></span> of <span id="total-steps"><%= project.Steps.length %></span> steps completed
          </p>
          <ol class="pl-3">
            <% if (project.Steps && project.Steps.length > 0) { %> <%
            project.Steps.forEach((step, index) => { %>
            <li class="mb-2">
              <strong>Step <%= index + 1 %>:</strong>
              <p class="step-description"><%= step.description %></p>
              <input type="checkbox" <%= step.completed ? 'checked' : '' %>
              onclick="toggleStepCompletion( '<%= step.stepId %>',
              this.checked)"> Completed
            </li>
            <% }); %> <% } else { %>
            <li>No steps available</li>
            <% } %>
          </ol>
        </div>

        <!-- Chat Section -->
        <% if (isCreator || isCollaborator) { %>
        <div class="chat-section mt-4">
          <h4 class="section-title">Chat</h4>
          <div class="chat-box card">
            <div class="card-body chat-content" id="chat-content">
              <!-- Chat messages will appear here -->
            </div>
            <div class="card-footer">
              <form id="chat-form">
                <div class="input-group">
                  <input
                    type="text"
                    id="chat-message"
                    class="form-control"
                    placeholder="Type a message..."
                  />
                  <div class="input-group-append">
                    <button type="submit" class="btn btn-primary">Send</button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
        <% } %>
        <!-- End of Chat Section -->
      </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();
      const chatForm = document.getElementById("chat-form");
      const chatMessage = document.getElementById("chat-message");
      const chatContent = document.getElementById("chat-content");
      const loggedInUsername = "<%= loggedInUsername %>";
      const projectId = "<%= project.projectId %>";

      // Fetch chat messages
      async function fetchChats(projectId) {
        try {
          chatContent.innerHTML = "";
          const response = await fetch(`/chats/${projectId}`);
          const chats = await response.json();
          chats.forEach((chat) => {
            displayMessage(chat);
          });
        } catch (error) {
          console.error("Error fetching chats:", error);
        }
      }

      function displayMessage(chat) {
        const isLiked = chat.likedBy && chat.likedBy.includes(loggedInUsername);
        const heartClass = isLiked ? "fas" : "far";

        const messageElement = document.createElement("div");
        messageElement.id = `chat-${chat.chatId}`;
        messageElement.innerHTML = `
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <strong>${chat.Sender.username}:</strong> ${chat.message}
          </div>
          <div>
            <i class="${heartClass} fa-heart text-danger" onclick="likeChat(${chat.chatId})"></i>
            <i class="fas fa-trash text-danger" onclick="deleteChat(${chat.chatId})"></i>
          </div>
        </div>
      `;
        chatContent.appendChild(messageElement);
        chatContent.scrollTop = chatContent.scrollHeight;
      }

      // Handle incoming messages
      socket.on("chat message", function (msg) {
        if (msg.projectId === projectId) {
          displayMessage(msg);
        }
      });

      // Handle form submission
      chatForm.addEventListener("submit", async function (e) {
        e.preventDefault();
        if (chatMessage.value) {
          const message = chatMessage.value;
          chatMessage.value = "";
          try {
            const response = await fetch("/chats", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ message, projectId }),
            });
            const chat = await response.json();
            socket.emit("chat message", { ...chat, projectId });
          } catch (error) {
            console.error("Error sending message:", error);
          }
        }
      });

      fetchChats(projectId);

      async function likeChat(chatId) {
        try {
          const response = await fetch(`/chats/${chatId}/like`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
          });
          const result = await response.json();
          if (response.ok) {
            const chatElement = document.getElementById(`chat-${chatId}`);
            const heartIcon = chatElement.querySelector(".fa-heart");
            if (result.liked) {
              heartIcon.classList.remove("far");
              heartIcon.classList.add("fas");
            } else {
              heartIcon.classList.remove("fas");
              heartIcon.classList.add("far");
            }
            Swal.fire({
              icon: "success",
              title: "Success!",
              text: result.liked
                ? "You liked this chat."
                : "You unliked this chat.",
            });
          }
        } catch (error) {
          Swal.fire({
            icon: "error",
            title: "Oops...",
            text: "Failed to like the chat, please try again later.",
          });
        }
      }

      async function deleteChat(chatId) {
        try {
          const response = await fetch(`/chats/${chatId}/delete`, {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
            },
          });
          const result = await response.json();
          if (response.ok) {
            Swal.fire({
              icon: "success",
              title: "Deleted!",
              text: "Chat has been successfully deleted.",
            });
            const chatElement = document.getElementById(`chat-${chatId}`);
            if (chatElement) {
              chatElement.remove();
            }
          }
        } catch (error) {
          Swal.fire({
            icon: "error",
            title: "Oops...",
            text: "Failed to delete the chat, please try again later.",
          });
        }
      }

      document
        .getElementById("projectImage")
        .addEventListener("click", function () {
          document.getElementById("imageUpload").click();
        });

      document
        .getElementById("imageUpload")
        .addEventListener("change", async function () {
          const file = this.files[0];
          if (file) {
            let formData = new FormData();
            formData.append("coverImage", file);

            try {
              const response = await fetch(
                `/projects/${projectId}/upload-coverImage`,
                {
                  method: "POST",
                  body: formData,
                }
              );

              const data = await response.json();
              console.log("Response from server:", data);

              if (data.success) {
                document.getElementById("projectImage").src = data.imageUrl;
                Swal.fire({
                  icon: "success",
                  title: "Cover image updated successfully!",
                  showConfirmButton: false,
                  timer: 1500,
                });
              } else {
                Swal.fire({
                  icon: "error",
                  title: "Failed to update cover image",
                  text: "Please try again later",
                });
              }
            } catch (error) {
              Swal.fire({
                icon: "error",
                title: "Failed to update cover image",
                text: error.message,
              });
            }
          }
        });

      async function deleteProject(projectId) {
        const result = await Swal.fire({
          title: "Are you sure?",
          text: "You won't be able to revert this!",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#F5E2C2",
          cancelButtonColor: "#d33",
          confirmButtonText: "Yes, delete it!",
        });

        if (result.isConfirmed) {
          try {
            console.log("Deleting project with ID:", projectId);
            const response = await fetch(`/projects/${projectId}/delete`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
            });

            if (!response.ok) {
              const data = await response.json();
              Swal.fire({
                icon: "error",
                title: "Oops...",
                text:
                  data.message ||
                  "Failed to delete the project, please try again later.",
              });
              throw new Error(
                data.message || "Server responded with an error."
              );
            }

            const data = await response.json();
            console.log("Project deleted:", data);

            const projectElement = document.getElementById(
              `project-${projectId}`
            );
            if (projectElement) {
              projectElement.remove();
              Swal.fire({
                icon: "success",
                title: "Deleted!",
                text: data.message || "Project has been successfully deleted.",
              }).then(() => {
                window.location.href = "/my-projects/all";
              });
            } else {
              console.error(
                "Failed to find the project element:",
                `project-${projectId}`
              );
              Swal.fire({
                icon: "error",
                title: "Oops...",
                text: "Failed to find the project element on the page.",
              });
            }
          } catch (error) {
            console.error("Error deleting the project:", error);
            Swal.fire({
              icon: "error",
              title: "Error!",
              text: "There was an issue deleting your project.",
            });
          }
        }
      }

      async function confirmLeaveProject(projectId) {
        const result = await Swal.fire({
          title: "Are you sure?",
          text: "You won't be able to revert this!",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#F5E2C2",
          cancelButtonColor: "#d33",
          confirmButtonText: "Yes, leave it!",
        });

        if (result.isConfirmed) {
          try {
            const response = await fetch(`/projects/${projectId}/leave`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
            });

            if (!response.ok) {
              const data = await response.json();
              Swal.fire({
                icon: "error",
                title: "Oops...",
                text:
                  data.message ||
                  "Failed to leave the project, please try again later.",
              });
              throw new Error(
                data.message || "Server responded with an error."
              );
            }

            const data = await response.json();
            Swal.fire({
              icon: "success",
              title: "Left Project!",
              text: data.message || "You have successfully left the project.",
            }).then(() => {
              window.location.href = "/my-projects/all";
            });
          } catch (error) {
            console.error("Error leaving the project:", error);
            Swal.fire({
              icon: "error",
              title: "Error!",
              text: "There was an issue leaving the project.",
            });
          }
        }
      }

      async function toggleStepCompletion(stepId, completed) {
        try {
          console.log(`Toggling completion for step ${stepId} to ${completed}`);

          const response = await fetch(`/projects/steps/${stepId}/complete`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ completed }),
          });
          if (!response.ok) {
            throw new Error("Failed to update step completion status");
          }
          const data = await response.json();
          Swal.fire({
            icon: "success",
            title: "Success!",
            text: "Step completion status updated.",
        }).then(() => {
            location.reload();
        });


        } catch (error) {
          console.error("Error updating step completion status:", error);
          Swal.fire({
            icon: "error",
            title: "Error!",
            text:
              error.message ||
              "There was an issue updating the step completion status.",
          });
        }
      }
    </script>
    <script>
    async function removeCollaborator(projectId, collaboratorId) {
    try {
        const response = await fetch(`/projects/${projectId}/collaborator/${collaboratorId}/remove`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();

        if (!response.ok) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: data.message || 'Failed to remove collaborator, please try again later.',
            });
            throw new Error(data.message || 'Failed to remove collaborator.');
        }

        Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: 'Collaborator removed successfully.',
        }).then(() => {
            location.reload();
        });
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'An error occurred while removing the collaborator.',
        });
    }
}

      </script>
      
  </body>
</html>
